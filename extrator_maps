import os
import time
import numpy as np
import pandas as pd
import folium
import googlemaps


class GoogleMapsLoader:
    """Inicializa o cliente GoogleMaps."""
    def __init__(self, api_key: str):
        self.client = googlemaps.Client(key=api_key)


class PlacesSearcher:
    """Busca lugares dentro da área definida por grid de coordenadas."""
    def __init__(self, gmaps_client, queries: list, radius: int = 1000):
        self.gmaps = gmaps_client
        self.queries = queries
        self.radius = radius

    def _search_page(self, query, location, page_token=None):
        return self.gmaps.places(query=query,
                                 location=location,
                                 radius=self.radius,
                                 page_token=page_token)

    def search_grid(self, lat_vals, lon_vals):
        results = []
        for lat in lat_vals:
            for lon in lon_vals:
                page_token = None
                while True:
                    response = self._search_page('|'.join(self.queries), (lat, lon), page_token)
                    results.extend(response.get('results', []))
                    next_token = response.get('next_page_token')
                    if not next_token:
                        break
                    page_token = next_token
                    time.sleep(2)  # aguarda o token
        return results


class DataFormatter:
    """Formata e enriquece o DataFrame de resultados."""
    def __init__(self, raw_results: list, gmaps_client):
        self.raw = raw_results
        self.gmaps = gmaps_client

    def to_dataframe(self):
        df = pd.DataFrame(self.raw)
        df = df[['name','formatted_address','geometry','types','user_ratings_total','rating','place_id']]
        df.columns = ['title','address','gps','types','reviews','rating','place_id']
        df['link'] = 'https://www.google.com/maps/place/?q=place_id:' + df['place_id']
        df['LATITUDE'] = df['gps'].apply(lambda x: x['location']['lat'])
        df['LONGITUDE'] = df['gps'].apply(lambda x: x['location']['lng'])
        df['telephone'] = df['place_id'].apply(self._fetch_phone)
        return df.drop(columns=['gps','types'])

    def _fetch_phone(self, place_id: str):
        detail = self.gmaps.place(place_id, fields=['formatted_phone_number'])
        return detail.get('result', {}).get('formatted_phone_number')


class MapVisualizer:
    """Gera mapa Folium a partir do DataFrame formatado."""
    def __init__(self, df: pd.DataFrame, output_path: str, zoom_start: int = 12):
        self.df = df
        self.output = output_path
        first = df[['LATITUDE','LONGITUDE']].iloc[0]
        self.map = folium.Map(location=[first.LATITUDE, first.LONGITUDE], zoom_start=zoom_start)

    def add_markers(self):
        for _, row in self.df.iterrows():
            folium.Marker(
                location=[row.LATITUDE, row.LONGITUDE],
                popup=(f"<b>{row.title}</b><br>{row.address}" \
                       f"<br><a href='{row.link}'>Abrir no Google Maps</a>"),
                tooltip=row.title
            ).add_to(self.map)
        return self

    def save(self):
        self.map.save(self.output)
        return self


class PlacesPipeline:
    """Orquestra as etapas de busca, formatação e visualização."""
    def __init__(self, api_key, area_coords, step=0.01):
        self.loader = GoogleMapsLoader(api_key)
        self.area = area_coords
        self.step = step

    def run(self, output_file):
        lats = np.arange(min(c[0] for c in self.area), max(c[0] for c in self.area), self.step)
        lons = np.arange(min(c[1] for c in self.area), max(c[1] for c in self.area), self.step)

        queries = [
            'mercado','mercadinho','mercearia','hipermercado',
            'conveniencia','padaria','panificadora','lanchonete','lanches'
        ]

        # 1) Busca
        results = PlacesSearcher(self.loader.client, queries).search_grid(lats, lons)
        # 2) Formata
        df = DataFormatter(results, self.loader.client).to_dataframe()
        # 3) Visualiza
        MapVisualizer(df, output_file).add_markers().save()
        print(f"Mapa gerado em: {output_file}")


if __name__ == '__main__':
    area_coords = [(-23.64315,-46.53820),(-23.73107,-46.49626),
                   (-23.66483,-46.56909),(-23.64021,-46.51978)]
    pipeline = PlacesPipeline(api_key=os.getenv('GMAPS_KEY','YOUR_KEY'),
                               area_coords=area_coords)
    pipeline.run(output_file=os.path.join(os.getcwd(),'mapa_interativo.html'))
